version: '1.0'
stages:
  - build
  - "pull request"
  - staging
  - production
steps:
  main_clone:
    title: Cloning main repository...
    type: git-clone
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_REVISION}}'
    git: mluyo3414
  BuildingMicroServices:
    type: parallel
    stage: build
    steps:
      BuildResultImage:
        title: Building Result Image
        type: build
        image_name: mluyo3414/example-voting-app-result
        working_directory: ./result/
        dockerfile: Dockerfile
        tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
      BuildVoteImage:
        title: Building Vote Image
        type: build
        image_name: mluyo3414/example-voting-app-vote
        working_directory: ./vote/
        dockerfile: Dockerfile
        tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
      BuildWorkerImage:
        title: Building Worker Image
        type: build
        image_name: mluyo3414/example-voting-app-worker
        working_directory: ./worker/
        dockerfile: Dockerfile
        tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
      BuildTestImage:
        title: Building Test Image
        type: build
        image_name: mluyo3414/example-voting-app-tests
        working_directory: ./tests/
        dockerfile: Dockerfile
        tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
    fail_fast: true
  DeployPRRelease:
    stage: "pull request"
    title: Deploy to PR namespace
    image: codefresh/cf-deploy-kubernetes:master
    commands:
      - /cf-deploy-kubernetes k8s-specifications/db-deployment.yaml
      - /cf-deploy-kubernetes k8s-specifications/db-service.yaml
      - /cf-deploy-kubernetes k8s-specifications/redis-deployment.yaml
      - /cf-deploy-kubernetes k8s-specifications/redis-service.yaml
      - /cf-deploy-kubernetes k8s-specifications/result-deployment.yaml
      - /cf-deploy-kubernetes k8s-specifications/result-service.yaml
      - /cf-deploy-kubernetes k8s-specifications/vote-deployment.yaml
      - /cf-deploy-kubernetes k8s-specifications/vote-service.yaml
      - /cf-deploy-kubernetes k8s-specifications/worker-deployment.yaml

    environment:
      - KUBECONTEXT=gke_sandbox-271314_us-central1-c_cluster-1
      - KUBERNETES_NAMESPACE=voting-app
      - KUBERNETES_DEPLOYMENT_TIMEOUT=360   
    when:
      condition:
        any:
          isPRopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'opened'"
          isPRsynchronized: "'${{CF_PULL_REQUEST_ACTION}}' == 'synchronize'"
          isPRreopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'reopened'"
  RemoveExistingTestReports:
    title: Removing Previous Test Reports
    image: alpine
    stage: "pull request"
    commands:
      - cd '${{CF_VOLUME_PATH}}/'
      - rm -r -f allure-results
    when:
      condition:
        any:
          isPRopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'opened'"
          isPRsynchronized: "'${{CF_PULL_REQUEST_ACTION}}' == 'synchronize'"
          isPRreopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'reopened'"
  GetKubernetesServicesEndpoints:
    title: Getting Kubernetes Services Endpoints
    image: codefresh/cfstep-helm
    stage: "pull request"
    commands:
      - kubectl config use-context ${{KUBE_CONTEXT}}
      - bash -c 'cf_export VOTE_ENDPOINT_IP=$(kubectl get svc/vote -n voting-app -o=jsonpath='{@.status.loadBalancer.ingress[*].ip}')'
      - bash -c 'cf_export RESULT_ENDPOINT_IP=$(kubectl get svc/result -n voting-app -o=jsonpath='{@.status.loadBalancer.ingress[*].ip}')'
    when:
      condition:
        any:
          isPRopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'opened'"
          isPRsynchronized: "'${{CF_PULL_REQUEST_ACTION}}' == 'synchronize'"
          isPRreopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'reopened'"
  RunDeploymentVerificationTests:
    title: Running Selenium DVTs
    stage: "pull request"
    type: composition
    composition:
      version: '2'
      services:
        selenium_hub:
          image: selenium/hub:3.13.0
          ports:
            - 4444
          environment:
            - SE_OPTS=-debug
            - GRID_MAX_SESSION=5
        chrome_node:
          image: selenium/node-chrome:3.13.0
          ports:
            - 5900
            - 5555
          command: bash -c "sleep 5 && /opt/bin/entry_point.sh"
          depends_on: 
            - selenium_hub
          environment:
            - HUB_HOST=selenium_hub
            - REMOTE_HOST=http://chrome_node:5555
            - NODE_MAX_SESSION=5
            - NODE_MAX_INSTANCES=5
        firefox_node:
          image: selenium/node-firefox:3.13.0
          ports:
            - 5900
            - 5555
          command: bash -c "sleep 5 && /opt/bin/entry_point.sh"
          depends_on: 
            - selenium_hub
          environment:
            - HUB_HOST=selenium_hub
            - REMOTE_HOST=http://firefox_node:5555
            - NODE_MAX_SESSION=5
            - NODE_MAX_INSTANCES=5
    composition_candidates:
      test:
        image: 'mluyo3414/example-voting-app-tests:${{CF_BRANCH_TAG_NORMALIZED_LOWER_CASE}}-${{CF_SHORT_REVISION}}'
        working_dir: ${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}
        environment:
          VOTE_ENDPOINT_IP: ${{VOTE_ENDPOINT_IP}}
          RESULT_ENDPOINT_IP: ${{RESULT_ENDPOINT_IP}}
        command: bash -c 'IFS=" " read -a browserarray <<< "${{BROWSERS}}" && for browser in "$${browserarray[@]}"; do BROWSER=$$browser python -m pytest -vvv --alluredir=${{CF_VOLUME_PATH}}/allure-results ./tests/selenium/test_app.py; done'
        volumes:
          - '${{CF_VOLUME_NAME}}:/codefresh/volume'

# See https://codefresh.io/docs/docs/testing/test-reports to setup test reporting.  Tests above already in correct folder just need to add storage integration to this pipeline and uncomment steps below.
  # GenerateTestReporting:
  #   title: Generating Test Reporting
  #   image: codefresh/cf-docker-test-reporting
  #   working_directory: '${{CF_VOLUME_PATH}}/'
    when:
      condition:
        any:
          isPRopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'opened'"
          isPRsynchronized: "'${{CF_PULL_REQUEST_ACTION}}' == 'synchronize'"
          isPRreopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'reopened'"
  UpgradeStageRelease:
    stage: staging
    title: Upgrading Staging Release
    image: codefresh/cf-deploy-kubernetes:master
    commands:
      - /cf-deploy-kubernetes k8s-specifications/db-deployment.yaml
      - /cf-deploy-kubernetes k8s-specifications/db-service.yaml
      - /cf-deploy-kubernetes k8s-specifications/redis-deployment.yaml
      - /cf-deploy-kubernetes k8s-specifications/redis-service.yaml
      - /cf-deploy-kubernetes k8s-specifications/result-deployment.yaml
      - /cf-deploy-kubernetes k8s-specifications/result-service.yaml
      - /cf-deploy-kubernetes k8s-specifications/vote-deployment.yaml
      - /cf-deploy-kubernetes k8s-specifications/vote-service.yaml
      - /cf-deploy-kubernetes k8s-specifications/worker-deployment.yaml
    environment:
      - KUBECONTEXT=gke_sandbox-271314_us-central1-c_cluster-1
      - KUBERNETES_NAMESPACE=voting-app-stage
      - KUBERNETES_DEPLOYMENT_TIMEOUT=360   
    when:
      condition:
        any:
          stageRelease: "'${{CF_PRERELEASE_FLAG}}' == 'true'"
          prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
  RemoveExistingTestReportsStage:
    title: Removing Previous Test Reports
    image: alpine
    stage: staging
    commands:
      - cd '${{CF_VOLUME_PATH}}/'
      - rm -r -f allure-results
    when:
      condition:
        any:
          stageRelease: "'${{CF_PRERELEASE_FLAG}}' == 'true'"
          prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
  GetKubernetesServicesEndpointsStage:
    title: Getting Kubernetes Services Endpoints
    image: codefresh/cfstep-helm
    stage: staging
    commands:
      - kubectl config use-context ${{KUBE_CONTEXT}}
      - bash -c 'cf_export VOTE_ENDPOINT_IP=$(kubectl get svc/vote -n voting-app-stage -o=jsonpath='{@.status.loadBalancer.ingress[*].ip}')'
      - bash -c 'cf_export RESULT_ENDPOINT_IP=$(kubectl get svc/result -n voting-app-stage -o=jsonpath='{@.status.loadBalancer.ingress[*].ip}')'
    when:
      condition:
        any:
          stageRelease: "'${{CF_PRERELEASE_FLAG}}' == 'true'"
          prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
  RunDeploymentVerificationTestsStage:
    title: Running Selenium DVTs
    stage: staging
    type: composition
    composition:
      version: '2'
      services:
        selenium_hub:
          image: selenium/hub:3.13.0
          ports:
            - 4444
          environment:
            - SE_OPTS=-debug
            - GRID_MAX_SESSION=5
        chrome_node:
          image: selenium/node-chrome:3.13.0
          ports:
            - 5900
            - 5555
          command: bash -c "sleep 5 && /opt/bin/entry_point.sh"
          depends_on: 
            - selenium_hub
          environment:
            - HUB_HOST=selenium_hub
            - REMOTE_HOST=http://chrome_node:5555
            - NODE_MAX_SESSION=5
            - NODE_MAX_INSTANCES=5
        firefox_node:
          image: selenium/node-firefox:3.13.0
          ports:
            - 5900
            - 5555
          command: bash -c "sleep 5 && /opt/bin/entry_point.sh"
          depends_on: 
            - selenium_hub
          environment:
            - HUB_HOST=selenium_hub
            - REMOTE_HOST=http://firefox_node:5555
            - NODE_MAX_SESSION=5
            - NODE_MAX_INSTANCES=5
    composition_candidates:
      test:
        image: 'mluyo3414/example-voting-app-tests:${{CF_BRANCH_TAG_NORMALIZED_LOWER_CASE}}-${{CF_SHORT_REVISION}}'
        working_dir: ${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}
        environment:
          VOTE_ENDPOINT_IP: ${{VOTE_ENDPOINT_IP}}
          RESULT_ENDPOINT_IP: ${{RESULT_ENDPOINT_IP}}
        command: bash -c 'IFS=" " read -a browserarray <<< "${{BROWSERS}}" && for browser in "$${browserarray[@]}"; do BROWSER=$$browser python -m pytest -vvv --alluredir=${{CF_VOLUME_PATH}}/allure-results ./tests/selenium/test_app.py; done'
        volumes:
          - '${{CF_VOLUME_NAME}}:/codefresh/volume'
    when:
      condition:
        any:
          stageRelease: "'${{CF_PRERELEASE_FLAG}}' == 'true'"
          prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"          
  ProductionApproval:
    type: pending-approval
    title: Deploy to Production?
    description: Deploys current release to production
    when:
      condition:
        all:
          prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
  UpgradeProductionRelease:
    stage: production
    title: Upgrading Production Release
    image: codefresh/cf-deploy-kubernetes:master
    commands:
      - /cf-deploy-kubernetes k8s-specifications/db-deployment.yaml
      - /cf-deploy-kubernetes k8s-specifications/db-service.yaml
      - /cf-deploy-kubernetes k8s-specifications/redis-deployment.yaml
      - /cf-deploy-kubernetes k8s-specifications/redis-service.yaml
      - /cf-deploy-kubernetes k8s-specifications/result-deployment.yaml
      - /cf-deploy-kubernetes k8s-specifications/result-service.yaml
      - /cf-deploy-kubernetes k8s-specifications/vote-deployment.yaml
      - /cf-deploy-kubernetes k8s-specifications/vote-service.yaml
      - /cf-deploy-kubernetes k8s-specifications/worker-deployment.yaml
    environment:
      - KUBECONTEXT=gke_sandbox-271314_us-central1-c_cluster-1
      - KUBERNETES_NAMESPACE=voting-app-prod
      - KUBERNETES_DEPLOYMENT_TIMEOUT=360   
    when:
      steps:
      - name: ProductionApproval
        on:
        - approved
